import Data.List.Split
import System.Environment
import System.FilePath

main :: IO()
main = getArgs >>= parseArgs

parseArgs :: [String] -> IO()
parseArgs (h:t) = encodeFile h >> parseArgs t
parseArgs _ = return ()

encodeFile :: FilePath -> IO()
encodeFile fp = readFile fp >>= \x-> putStr (parse fp x)

parse :: FilePath -> String -> String
parse fp l =  ">" ++ fp ++ "\n" ++ ((removeRep . encode) l) ++ "\n"

encode :: String -> String
encode l = reverse $ foldl (flip (:)) "" (map (getCode.(splitOn ";")) (splitOn "\n" l))

getCode :: [String] -> Char
getCode (_:_:"QUERY":"MUTEX":_)       = 'A'
getCode (_:_:"CREATE":"MUTEX":_)      = 'C'
getCode (_:_:"RELEASE":"MUTEX":_)     = 'D'
getCode (_:_:"OPEN":"FILE":_)         = 'E'
getCode (_:_:"WRITE":"FILE":_)        = 'F'
getCode (_:_:"CREATE":"FILE":_)       = 'G'
getCode (_:_:"DELETE":"FILE":_)       = 'H'
getCode (_:_:"CREATE":"PROCESS":_)    = 'I'
getCode (_:_:"OPEN":"PROCESS":_)      = 'K'
getCode (_:_:"TERMINATE":"PROCESS":_) = 'L'
getCode (_:_:"READ":"REGISTRY":_)     = 'M'
getCode (_:_:"WRITE":"REGISTRY":_)    = 'N'
getCode (_:_:"CREATE":"REGISTRY":_)   = 'P'
getCode (_:_:"DELETE":"REGISTRY":_)   = 'Q'
getCode (_:_:"RECEIVE":"NET":_)       = 'R'
getCode (_:_:"SEND":"NET":_)          = 'S'
getCode (_:_:"CONNECT":"NET":_)       = 'T'
getCode (_:_:"DISCONNECT":"NET":_)    = 'V'
getCode (_:_:"WRITE":"MEMORY":_)      = 'W'
getCode (_:_:"LOAD":"DRIVER":_)       = 'Y'
getCode (_:_:"READ":"FILE":_)         = 'E' --'U'
getCode _ = '\n'

removeRep :: String -> String
removeRep (x:y:t) | x == y    = removeRep (x:t)
                  | otherwise = x:(removeRep (y:t))
removeRep [x] = [x]
--removeRep x = x
