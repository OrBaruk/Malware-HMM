import Data.List.Split
import System.Environment
import System.FilePath

main :: IO()
main = getArgs >>= parseArgs

parseArgs :: [String] -> IO()
parseArgs (h:t) = encodeFile h >> parseArgs t
parseArgs _ = return ()

encodeFile :: FilePath -> IO()
encodeFile fp = readFile fp >>= \x-> putStr (parse fp x)

parse :: FilePath -> String -> String
parse fp l =  ">" ++ fp ++ "\n" ++ ((removeRep . encode) l) ++ "\n"

encode :: String -> String
encode l = reverse $ foldl (flip (:)) "" (map (getCode.(splitOn ",")) (splitOn "\n" l))

getCode :: [String] -> Char
getCode (_:"query":"mutex":_)       = 'A'
getCode (_:"create":"mutex":_)      = 'B'
getCode (_:"release":"mutex":_)     = 'C'
getCode (_:"read":"file":_)         = 'D'
getCode (_:"write":"file":_)        = 'E'
getCode (_:"create":"file":_)       = 'F'
getCode (_:"delete":"file":_)       = 'G'
getCode (_:"create":"process":_)    = 'H'
getCode (_:"open":"process":_)      = 'I'
getCode (_:"terminate":"process":_) = 'J'
getCode (_:"read":"registry":_)     = 'K'
getCode (_:"write":"registry":_)    = 'L'
getCode (_:"create":"registry":_)   = 'M'
getCode (_:"delete":"registry":_)   = 'N'
getCode (_:"receive":"net":_)       = 'O'
getCode (_:"send":"net":_)          = 'P'
getCode (_:"connect":"net":_)       = 'Q'
getCode (_:"disconnect":"net":_)    = 'R'
getCode (_:"write":"memory":_)      = 'S'
getCode (_:"load":"driver":_)       = 'T'
getCode (_:"open":"net":_)          = 'U'
getCode _ = '\n'

removeRep :: String -> String
-- removeRep (x:y:t) | x == y    = removeRep (x:t)
--                   | otherwise = x:(removeRep (y:t))
-- removeRep [x] = [x]
removeRep x = x
