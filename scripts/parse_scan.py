import sys
import json
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from ast import literal_eval
from sklearn import svm, datasets
from sklearn.cross_validation import train_test_split
from sklearn.metrics import confusion_matrix

d = dict()

def main():
	global d
	# if len(sys.argv) != 2:
	# 	print("Usage: python3 parse_scan.py [pyout.txt] ")
		# return 0

	f = open(sys.argv[1])

	entry = []
	for line in f:
		entry.append(literal_eval(line))

	for e in entry:
		if not (e['Name'] in d):
			d[e['Name']] = []

		d[e['Name']].append(e)

def plot_all(d):
	for k in d:
		plot_metrics(d[k], k)
		print_max_rates(d[k], k)
	plot_detection_rate(d.popitem()[1])

def print_max_rates(points, name):
	Fscore = 0
	Precision = 0
	Recall = 0
	Threshold = 100
	for e in points:
		if e['Fscore'] > Fscore:
			Fscore = e['Fscore']
			Precision = e['Precision']
			Recall = e['Recall']
			Threshold = int(e['Threshold'])
		elif e['Fscore'] == Fscore:
			if int(e['Threshold']) < Threshold:
				Precision = e['Precision']
				Recall = e['Recall']
				Threshold = int(e['Threshold'])

	print(name, Fscore, Precision, Recall, Threshold)

def plot_detection_rate(points):
	labelsx = dict()
	labelsy = dict()
	labelsx['DetectionRate'] = []
	labelsy['DetectionRate'] = []

	for e in points:
		labelsx['DetectionRate'].append(e['Threshold'])
		labelsy['DetectionRate'].append(e['DetectionRate'])
	
	plt.ylim([0,1])
	plt.gca().set_color_cycle(['red'])
	plt.plot(labelsx['DetectionRate'], labelsy['DetectionRate'])
	plt.title('Detection Rate')
	plt.xlabel('Threshold')
	plt.ylabel('Percentage')

	plt.savefig('detection.png')
	plt.clf()

def plot_metrics(points, name):
	labelsx = dict()
	labelsy = dict()
	labelsx['FScore'] = []
	labelsy['FScore'] = []
	labelsx['Precision'] = []
	labelsy['Precision'] = []
	labelsx['Recall'] = []
	labelsy['Recall'] = []

	for e in points:
		labelsx['FScore'].append(e['Threshold'])
		labelsy['FScore'].append(e['Fscore'])
		labelsx['Precision'].append(e['Threshold']) 
		labelsy['Precision'].append(e['Precision'])
		labelsx['Recall'].append(e['Threshold']) 
		labelsy['Recall'].append(e['Recall'])

	plt.ylim([0,1.35])
	plt.gca().set_color_cycle(['red', 'green', 'blue'])

	l = ['Precision', 'Recall', 'FScore']
	plt.plot(labelsx['Precision'], labelsy['Precision'])
	plt.plot(labelsx['Recall'], labelsy['Recall'])
	plt.plot(labelsx['FScore'], labelsy['FScore'])
	plt.title(name)
	plt.legend(l, loc='upper left')

	plt.xlabel('Threshold')
	plt.ylabel('Percentage')

	plt.savefig('thresh-'+name+'.png')
	plt.clf()

if __name__ == '__main__':
	main()
