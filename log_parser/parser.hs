import Data.List.Split

main :: IO()
main = readFile "log.txt" >>= \x ->
        putStr $ parse x

parse :: String -> String
parse l =  reverse $ '\n':(foldl (\s x->x:s) (reverse ">NOME DO EXEMPLAR\n") (map getCode (splitOn "\n" l)))

getCode :: String -> Char
getCode = translate . (splitOn ",")

translate :: [String] -> Char
translate (_:"query":"mutex":_)       = 'A'
translate (_:"create":"mutex":_)      = 'B'
translate (_:"release":"mutex":_)     = 'C'
translate (_:"read":"file":_)         = 'D'
translate (_:"write":"file":_)        = 'E'
translate (_:"create":"file":_)       = 'F'
translate (_:"delete":"file":_)       = 'G'
translate (_:"create":"process":_)    = 'H'
translate (_:"open":"process":_)      = 'I'
translate (_:"terminate":"process":_) = 'J'
translate (_:"read":"registry":_)     = 'K'
translate (_:"write":"registry":_)    = 'L'
translate (_:"create":"registry":_)   = 'M'
translate (_:"delete":"registry":_)   = 'N'
translate (_:"receive":"net":_)       = 'O'
translate (_:"send":"net":_)          = 'P'
translate (_:"connect":"net":_)       = 'Q'
translate (_:"disconnect":"net":_)    = 'R'
translate (_:"write":"memory":_)      = 'S'
translate _ = 'X'


aux :: [String] -> String
aux (_:x1:x2:_) = (x1++" | "++x2)
aux _ = ""
